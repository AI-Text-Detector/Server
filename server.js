const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const axios = require('axios');
const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');
require('dotenv').config();

const app = express();
app.use(cors());
app.use(bodyParser.json());

// Swagger configuration
const swaggerOptions = {
  definition: {
    openapi: '3.0.0',
    info: {
      title: 'AI Text Detector API',
      version: '1.0.0',
      description: 'A RESTful API for detecting AI-generated text using machine learning models',
      contact: {
        name: 'API Support',
        email: 'support@example.com'
      },
      license: {
        name: 'MIT',
        url: 'https://opensource.org/licenses/MIT'
      }
    },
    servers: [
      {
        url: 'http://localhost:5000',
        description: 'Development server'
      }
    ],
    components: {
      schemas: {
        TextAnalysisRequest: {
          type: 'object',
          required: ['text'],
          properties: {
            text: {
              type: 'string',
              description: 'The text to analyze for AI detection',
              example: 'This is a sample text to analyze.'
            }
          }
        },
        TextAnalysisResponse: {
          type: 'object',
          properties: {
            result: {
              type: 'object',
              properties: {
                isAI: {
                  type: 'boolean',
                  description: 'Whether the text is detected as AI-generated',
                  example: true
                },
                confidence: {
                  type: 'number',
                  description: 'Confidence score of the detection (0-100)',
                  example: 85.5
                },
                details: {
                  type: 'string',
                  description: 'Additional details about the analysis',
                  example: 'Analysis completed successfully'
                }
              }
            }
          }
        },
        Error: {
          type: 'object',
          properties: {
            error: {
              type: 'string',
              description: 'Error message',
              example: 'Text is required'
            },
            details: {
              type: 'string',
              description: 'Additional error details',
              example: 'Request validation failed'
            }
          }
        }
      }
    }
  },
  apis: ['./server/server.js'] // Path to the API docs
};

const swaggerSpec = swaggerJsdoc(swaggerOptions);

// Serve Swagger documentation
app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerSpec));

/**
 * @swagger
 * /detect-text:
 *   post:
 *     summary: Analyze text for AI detection
 *     description: Analyzes the provided text to determine if it was generated by AI or written by a human
 *     tags: [Text Analysis]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/TextAnalysisRequest'
 *     responses:
 *       200:
 *         description: Text analysis completed successfully
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/TextAnalysisResponse'
 *             example:
 *               result:
 *                 isAI: true
 *                 confidence: 85.5
 *                 details: "Analysis completed successfully"
 *       400:
 *         description: Bad request - text is required
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *             example:
 *               error: "Text is required"
 *       500:
 *         description: Internal server error
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *             example:
 *               error: "Text detection failed"
 *               details: "API request failed"
 */
app.post('/detect-text', async (req, res) => {
  const text = req.body.text;
  
  if (!text) {
    return res.status(400).json({ error: 'Text is required' });
  }

  // Check if API key is configured
  const apiKey = process.env.HUGGINGFACE_API_KEY;
  if (!apiKey || apiKey === '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') {
    // Return mock response for demo purposes
    const mockResult = {
      isAI: Math.random() > 0.5,
      confidence: Math.floor(Math.random() * 40) + 60,
      details: 'Demo mode - Please configure your Hugging Face API key for real analysis'
    };
    return res.json({ result: mockResult });
  }

  // Real AI detection logic with Hugging Face
  try {
    const response = await axios.post('https://api-inference.huggingface.co/models/bert-base-uncased', {
      inputs: text,
    }, {
      headers: { Authorization: `Bearer ${apiKey}` }
    });
    
    res.json({ result: response.data });
  } catch (error) {
    console.error('API Error:', error.message);
    res.status(500).json({ error: 'Text detection failed', details: error.message });
  }
});

/**
 * @swagger
 * /health:
 *   get:
 *     summary: Health check endpoint
 *     description: Returns the health status of the API server
 *     tags: [System]
 *     responses:
 *       200:
 *         description: Server is healthy
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:
 *                   type: string
 *                   example: "OK"
 *                 message:
 *                   type: string
 *                   example: "AI Text Detector API is running"
 *             example:
 *               status: "OK"
 *               message: "AI Text Detector API is running"
 */
app.get('/health', (req, res) => {
  res.json({ status: 'OK', message: 'AI Text Detector API is running' });
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  console.log(`Health check: http://localhost:${PORT}/health`);
  console.log(`API Documentation: http://localhost:${PORT}/api-docs`);
});
